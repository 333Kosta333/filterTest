import java.util.*;
import java.util.regex.*;

public class FilterParser {

    public static List<SearchCriteria> parse(String filter) {
        List<SearchCriteria> criteriaList = new ArrayList<>();
        Pattern pattern = Pattern.compile("(\\w+(?:\\.\\w+)*)\\s+(\\w+)\\s+('.*?'|\\d+\\.\\d+\\.\\d+\\s+\\d+:\\d+:\\d+|\\d+)");
        Matcher matcher = pattern.matcher(filter);

        while (matcher.find()) {
            String key = matcher.group(1); // Поле (например, "requestType.type")
            String operation = matcher.group(2); // Операция (например, "eq")
            String value = matcher.group(3).replaceAll("^'|'$", ""); // Значение (например, "U1")

            SearchOperation searchOperation = SearchOperation.fromString(operation);
            criteriaList.add(new SearchCriteria(key, value, searchOperation));
        }

        return criteriaList;
    }
}
import org.springframework.data.jpa.domain.Specification;
import javax.persistence.EntityManager;
import javax.persistence.criteria.*;
import javax.persistence.metamodel.EntityType;
import javax.persistence.metamodel.Metamodel;
import java.sql.Timestamp;
import java.util.*;

public class GenericSpecification<T> implements Specification<T> {

    private final List<SearchCriteria> criteriaList;
    private final EntityManager entityManager; // Добавляем EntityManager

    public GenericSpecification(List<SearchCriteria> criteriaList, EntityManager entityManager) {
        this.criteriaList = criteriaList;
        this.entityManager = entityManager; // Инициализируем EntityManager
    }

    @Override
    public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
        List<Predicate> predicates = new ArrayList<>();

        for (SearchCriteria criteria : criteriaList) {
            String key = criteria.getKey();
            Object value = criteria.getValue();
            SearchOperation operation = criteria.getOperation();

            String[] keys = key.split("\\.");
            Path<?> path = resolvePath(root, keys);

            Predicate predicate = createPredicate(path, value, operation, builder);
            predicates.add(predicate);
        }

        return builder.and(predicates.toArray(new Predicate[0]));
    }

    private Path<?> resolvePath(Root<?> root, String[] keys) {
        Path<?> path = root;
        for (int i = 0; i < keys.length; i++) {
            String key = keys[i];

            if (i == keys.length - 1) {
                return path.get(key);
            }

            if (isInheritedField(path, key)) {
                path = path.get(key); // Для наследуемых полей
            } else {
                path = ((From<?, ?>) path).join(key, JoinType.INNER); // Для обычных полей
            }
        }
        return path;
    }

    private boolean isInheritedField(Path<?> path, String fieldName) {
        Metamodel metamodel = entityManager.getMetamodel();
        EntityType<?> entityType = metamodel.entity(path.getJavaType());

        if (entityType.getAttribute(fieldName) != null) {
            return false;
        }

        if (entityType.getSupertype() != null) {
            EntityType<?> superType = entityType.getSupertype();
            return superType.getAttribute(fieldName) != null;
        }

        return false;
    }

    private Predicate createPredicate(Path<?> path, Object value, SearchOperation operation, CriteriaBuilder builder) {
        Class<?> fieldType = path.getJavaType();

        if (fieldType.equals(String.class)) {
            return handleStringPredicate(path, value, operation, builder);
        } else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
            return handleLongPredicate(path, value, operation, builder);
        } else if (fieldType.equals(Timestamp.class) || fieldType.equals(Date.class)) {
            return handleTimestampPredicate(path, value, operation, builder);
        } else {
            throw new IllegalArgumentException("Unsupported field type: " + fieldType);
        }
    }

    // Методы handleStringPredicate, handleLongPredicate и т.д. остаются без изменений
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import javax.persistence.EntityManager;
import java.util.List;

@Service
public class RequestService {

    @Autowired
    private EntityManager entityManager; // Внедряем EntityManager

    @Autowired
    private RequestRepository requestRepository;

    public Page<Request> searchRequests(String filter, Pageable pageable) {
        List<SearchCriteria> criteriaList = FilterParser.parse(filter);

        // Создаем GenericSpecification с передачей EntityManager
        GenericSpecification<Request> spec = new GenericSpecification<>(criteriaList, entityManager);

        return requestRepository.findAll(spec, pageable);
    }
}
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/requests")
public class RequestController {

    @Autowired
    private RequestService requestService;

    @GetMapping("/search")
    public Page<Request> searchRequests(
            @RequestParam String filter, // Строка фильтров
            @RequestParam(defaultValue = "0") int page, // Номер страницы
            @RequestParam(defaultValue = "10") int size, // Размер страницы
            @RequestParam(defaultValue = "id,asc") String sort // Сортировка
    ) {
        Pageable pageable = PageRequest.of(page, size, Sort.by(sort.split(",")[0].trim()));
        return requestService.searchRequests(filter, pageable);
    }
}
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

@Service
public class RequestService {

    @Autowired
    private RequestRepository requestRepository;

    public Page<Request> searchRequests(String filter, Pageable pageable) {
        List<SearchCriteria> criteriaList = FilterParser.parse(filter);
        Specification<Request> spec = new GenericSpecification<>(criteriaList);
        return requestRepository.findAll(spec, pageable);
    }
}


***************************************
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import javax.persistence.EntityManager;

@Service
public class RequestService {

    @Autowired
    private EntityManager entityManager;

    @Autowired
    private RequestRepository requestRepository;

    public Page<Request> searchRequests(String filter, Pageable pageable) {
        // Разбираем строку фильтрации и создаем Specification
        Specification<Request> spec = FilterParser.parseToSpecification(filter, entityManager);

        // Выполняем запрос
        return requestRepository.findAll(spec, pageable);
    }
}
import org.springframework.data.jpa.domain.Specification;
import javax.persistence.criteria.*;
import javax.persistence.metamodel.EntityType;
import javax.persistence.metamodel.Metamodel;
import java.util.*;
import java.sql.Timestamp;

public class GenericSpecification<T> implements Specification<T> {

    private final List<SearchCriteria> criteriaList;
    private final EntityManager entityManager;

    public GenericSpecification(List<SearchCriteria> criteriaList, EntityManager entityManager) {
        this.criteriaList = criteriaList;
        this.entityManager = entityManager;
    }

    @Override
    public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
        List<Predicate> predicates = new ArrayList<>();

        for (SearchCriteria criteria : criteriaList) {
            String key = criteria.getKey();
            Object value = criteria.getValue();
            SearchOperation operation = criteria.getOperation();

            String[] keys = key.split("\\.");
            Path<?> path = resolvePath(root, keys);

            Predicate predicate = createPredicate(path, value, operation, builder);
            predicates.add(predicate);
        }

        return builder.and(predicates.toArray(new Predicate[0]));
    }

    private Path<?> resolvePath(Root<?> root, String[] keys) {
        Path<?> path = root;
        for (int i = 0; i < keys.length; i++) {
            String key = keys[i];

            if (i == keys.length - 1) {
                return path.get(key);
            }

            if (isInheritedField(path, key)) {
                path = path.get(key); // Для наследуемых полей
            } else {
                path = ((From<?, ?>) path).join(key, JoinType.INNER); // Для обычных полей
            }
        }
        return path;
    }

    private boolean isInheritedField(Path<?> path, String fieldName) {
        Metamodel metamodel = entityManager.getMetamodel();
        EntityType<?> entityType = metamodel.entity(path.getJavaType());

        if (entityType.getAttribute(fieldName) != null) {
            return false;
        }

        if (entityType.getSupertype() != null) {
            EntityType<?> superType = entityType.getSupertype();
            return superType.getAttribute(fieldName) != null;
        }

        return false;
    }

    private Predicate createPredicate(Path<?> path, Object value, SearchOperation operation, CriteriaBuilder builder) {
        Class<?> fieldType = path.getJavaType();

        if (fieldType.equals(String.class)) {
            return handleStringPredicate(path, value, operation, builder);
        } else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
            return handleLongPredicate(path, value, operation, builder);
        } else if (fieldType.equals(Timestamp.class) || fieldType.equals(Date.class)) {
            return handleTimestampPredicate(path, value, operation, builder);
        } else if (fieldType.equals(UUID.class)) {
            return handleUuidPredicate(path, value, operation, builder);
        } else {
            throw new IllegalArgumentException("Unsupported field type: " + fieldType);
        }
    }

    // Методы handleStringPredicate, handleLongPredicate и т.д. остаются без изменений
}


import java.util.*;
import java.util.regex.*;

public class FilterParser {

    public static List<SearchCriteria> parse(String filter) {
        List<SearchCriteria> criteriaList = new ArrayList<>();
        Pattern pattern = Pattern.compile("(\\w+(?:\\.\\w+)*)\\s+(\\w+)\\s+('.*?'|\\[.*?\\]|\\d+\\.\\d+\\.\\d+\\s+\\d+:\\d+:\\d+|\\d+)");
        Matcher matcher = pattern.matcher(filter);

        while (matcher.find()) {
            String key = matcher.group(1); // Поле (например, "requestType.type")
            String operation = matcher.group(2); // Операция (например, "eq")
            String value = matcher.group(3).replaceAll("^'|'$", ""); // Значение (например, "U1")

            SearchOperation searchOperation = SearchOperation.fromString(operation);
            criteriaList.add(new SearchCriteria(key, value, searchOperation));
        }

        return criteriaList;
    }

    public static Specification<?> parseToSpecification(String filter, EntityManager entityManager) {
        return parseLogicalExpression(filter, entityManager);
    }

    private static Specification<?> parseLogicalExpression(String expression, EntityManager entityManager) {
        // Удаляем внешние скобки, если они есть
        expression = expression.trim();
        if (expression.startsWith("(") && expression.endsWith(")")) {
            expression = expression.substring(1, expression.length() - 1).trim();
        }

        // Разделяем выражение на части по логическим операторам
        String[] parts = expression.split("\\s+(and|or)\\s+", -1);
        if (parts.length == 1) {
            // Если нет логических операторов, это простое условие
            return parseSimpleCondition(expression, entityManager);
        }

        // Определяем логический оператор
        String operator = expression.replaceAll(".*?(and|or).*", "$1").trim();

        // Рекурсивно обрабатываем левую и правую части выражения
        Specification<?> left = parseLogicalExpression(parts[0], entityManager);
        Specification<?> right = parseLogicalExpression(parts[1], entityManager);

        if (operator.equalsIgnoreCase("and")) {
            return Specification.where(left).and(right);
        } else if (operator.equalsIgnoreCase("or")) {
            return Specification.where(left).or(right);
        } else {
            throw new IllegalArgumentException("Unknown logical operator: " + operator);
        }
    }

    private static Specification<?> parseSimpleCondition(String condition, EntityManager entityManager) {
        List<SearchCriteria> criteriaList = parse(condition);
        return new GenericSpecification<>(criteriaList, entityManager);
    }
}
